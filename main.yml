# ---
# - name: Setup dotfiles in development environment
#   hosts: all
#   become: yes
#   vars_prompt:
#     - name: 'github_username'
#       prompt: 'Enter your GitHub username'
#       private: no

#     - name: 'github_token'
#       prompt: 'Enter your GitHub personal access token'
#       private: no
#   tasks:
# Doesn't work, even when my repo is public'
#     - name: Clone the bare repository
#       git:
#         repo: 'https://{{ github_username }}:{{ github_token }}@github.com/bcourtney5965/dotfiles.git'
#         dest: '{{ ansible_env.HOME }}/dotfiles'
#         bare: yes

#     - name: Define the dotfiles alias
#       lineinfile:
#         path: '{{ ansible_env.HOME }}/.bashrc'
#         line: 'alias dotfiles="/usr/bin/git --git-dir={{ ansible_env.HOME }}/dotfiles --work-tree={{ ansible_env.HOME }}"'
#         create: yes

#     - name: Source the .bashrc to apply the alias
#       shell: source {{ ansible_env.HOME }}/.bashrc
#       args:
#         executable: /usr/bin/bash

#     - name: Create backup directory for existing dotfiles
#       file:
#         path: '{{ ansible_env.HOME }}/.dotfiles-backup'
#         state: directory

#     - name: Backup existing dotfiles
#       shell: |
#         dotfiles checkout 2>&1 | egrep "\s+\." | awk {'print $1'} |
#         while read file; do
#           echo "Moving $file to {{ ansible_env.HOME }}/.dotfiles-backup/"
#           mv "{{ ansible_env.HOME }}/$file" "{{ ansible_env.HOME }}/.dotfiles-backup/"
#         done
#       environment:
#         dotfiles: '/usr/bin/git --git-dir={{ ansible_env.HOME }}/dotfiles --work-tree={{ ansible_env.HOME }}'
#       args:
#         executable: /usr/bin/bash

#     - name: Checkout the actual content from the bare repository
#       shell: dotfiles checkout
#       environment:
#         dotfiles: '/usr/bin/git --git-dir={{ ansible_env.HOME }}/dotfiles --work-tree={{ ansible_env.HOME }}'
#       args:
#         executable: /usr/bin/bash

#     - name: Set the repository to ignore untracked files
#       shell: dotfiles config --local status.showUntrackedFiles no
#       environment:
#         dotfiles: '/usr/bin/git --git-dir={{ ansible_env.HOME }}/dotfiles --work-tree={{ ansible_env.HOME }}'
#       args:
#         executable: /usr/bin/bash

---
- name: Install and configure development environment
  hosts: localhost
  connection: local
  become: true

  vars:
    common_packages:
      vim: vim
      zsh: zsh
      git: git

  vars_prompt:
    - name: 'github_username'
      prompt: 'Enter your GitHub username'
      private: no

    - name: 'github_token'
      prompt: 'Enter your GitHub personal access token'
      private: no

    # - name: 'npm_username'
    #   prompt: 'Enter your npm username'
    #   private: no

    - name: 'npm_password'
      prompt: 'Enter your npm password'
      private: no

    # - name: 'npm_email'
    #   prompt: 'Enter your npm email'
    #   private: no

    - name: 'decryption_password'
      prompt: 'Enter decryption password for SSH keys'
      private: yes

  tasks:
    - name: Include OS-specific variables
      include_vars: 'TaskFiles/{{ ansible_os_family | lower }}.yml'

    - name: Combine package lists
      set_fact:
        packages: '{{ common_packages | combine(additional_packages | default({})) }}'

    - name: Include OS-specific tasks
      include_tasks: 'TaskFiles/{{ ansible_os_family | lower }}_tasks.yml'

    # - name: Install Node.js and npm
    #   include_tasks: 'TaskFiles/node_install.yml'

    # - name: Install Yarn
    #   npm:
    #     name: yarn
    #     global: yes

    - name: Install Oh My Zsh
      shell: sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
      args:
        creates: '{{ ansible_env.HOME }}/.oh-my-zsh'

    - name: Check if dotfiles directory exists
      stat:
        path: '{{ ansible_env.HOME }}/dotfiles'
      register: dotfiles_dir
      tags: [dots remove]

    - name: Remove existing dotfiles directory
      when: dotfiles_dir.stat.exists
      file:
        path: '{{ ansible_env.HOME }}/dotfiles'
        state: absent
      tags: [dots remove]

    # This one works if the repo is public
    - name: Run config-init script
      shell: curl https://raw.githubusercontent.com/bcourtney5965/dotfiles/main/bin/config-init | bash
      args:
        executable: /usr/bin/bash

    - name: Source the .zshrc to apply the alias
      shell: source {{ ansible_env.HOME }}/.zshrc
      args:
        executable: /usr/bin/zsh

    - name: Decrypt SSH private key
      ansible.builtin.command:
        cmd: ansible-vault decrypt ~/.ssh/id_ed25519
      become: yes
      vars:
        ansible_become_pass: '{{ decryption_password }}'

    - name: Decrypt known_hosts file
      ansible.builtin.command:
        cmd: ansible-vault decrypt ~/.ssh/known_hosts
      become: yes
      vars:
        ansible_become_pass: '{{ decryption_password }}'

    - name: Set correct permissions on SSH directory and files
      ansible.builtin.file:
        path: '{{ item.path }}'
        state: '{{ item.state }}'
        mode: '{{ item.mode }}'
        owner: '{{ ansible_user }}'
        group: '{{ ansible_user }}'
      loop:
        - { path: '~/.ssh', state: 'directory', mode: '0700' }
        - { path: '~/.ssh/id_ed25519', state: 'file', mode: '0600' }
        - { path: '~/.ssh/id_ed25519.pub', state: 'file', mode: '0644' }
        - { path: '~/.ssh/known_hosts', state: 'file', mode: '0644' }
      become: yes

    - name: Set up SSH and 1Password
      block:
        - name: Check if 1Password CLI is installed
          ansible.builtin.command: which op
          register: op_cli_check
          changed_when: false
          failed_when: false

        - name: Set fact for 1Password CLI availability
          ansible.builtin.set_fact:
            op_cli_available: '{{ op_cli_check.rc == 0 }}'

        - name: Ensure 1Password CLI is installed (macOS)
          community.general.homebrew:
            name: 1password-cli
            state: present
          when:
            - ansible_os_family == "Darwin"
            - not op_cli_available

        - name: Check if 1Password SSH agent socket exists
          ansible.builtin.stat:
            path: '{{ ansible_env.HOME }}/Library/Group Containers/2BUA8C4S2C.com.1password/t/agent.sock'
          register: onepassword_ssh_agent_socket
          when: op_cli_available

        - name: Ensure 1Password SSH agent is enabled
          ansible.builtin.command: op plugin run --plugin-name ssh-agent
          when:
            - op_cli_available
            - not onepassword_ssh_agent_socket.stat.exists | default(false)
          register: onepassword_ssh_agent_enable
          changed_when: onepassword_ssh_agent_enable.rc == 0
          ignore_errors: yes

        - name: Set SSH_AUTH_SOCK for 1Password
          ansible.builtin.set_fact:
            ansible_env: "{{ ansible_env | combine({'SSH_AUTH_SOCK': ansible_env.HOME + '/Library/Group Containers/2BUA8C4S2C.com.1password/t/agent.sock'}) }}"
          when:
            - op_cli_available
            - onepassword_ssh_agent_socket.stat.exists | default(false)

        - name: Start system SSH agent if 1Password agent is not available
          block:
            - name: Start SSH agent
              ansible.builtin.shell: |
                eval $(ssh-agent -s)
                echo $SSH_AUTH_SOCK
              register: ssh_agent_output
              changed_when: false

            - name: Set SSH_AUTH_SOCK for system SSH agent
              ansible.builtin.set_fact:
                ansible_env: "{{ ansible_env | combine({'SSH_AUTH_SOCK': ssh_agent_output.stdout_lines[-1]}) }}"
          when: not op_cli_available or not onepassword_ssh_agent_socket.stat.exists | default(false)

      always:
        - name: Ensure SSH_AUTH_SOCK is available for subsequent tasks
          ansible.builtin.set_fact:
            ansible_env: "{{ ansible_env | combine({'SSH_AUTH_SOCK': ansible_env.SSH_AUTH_SOCK}) }}"

    # This one works!
    # - name: Clone dotfiles repository - 4
    #   git:
    #     repo: 'https://{{ github_username }}:{{ github_token }}@github.com/bcourtney5965/dotfiles'
    #     dest: '{{ ansible_env.HOME }}/dotfiles'
    #     version: main
    #     bare: no
    #     force: yes
    #   tags: [dots]

    # Cloning repo:
    # - name: Clone dotfiles repository - 1 (Debrecated for a NON-BARE clone)
    #   shell: git clone --bare https://{{ github_username }}:{{ github_token }}@github.com/bcourtney5965/dotfiles.git {{ ansible_env.HOME }}/dotfiles
    #   args:
    #     creates: '{{ ansible_env.HOME }}/dotfiles/HEAD'
    #   tags: [dots]

    # - name: Clone dotfiles repository - 1
    #   git:
    #     repo: 'https://{{ github_username }}:{{ github_token }}@github.com/bcourtney5965/dotfiles.git'
    #     dest: '{{ ansible_env.HOME }}'
    #     version: main
    #     force: yes
    #   args:
    #     creates: '{{ ansible_env.HOME }}/dotfiles'
    #   tags: [dots]

    # - name: Clone dotfiles repository - 3
    #   git:
    #     repo: 'https://{{ github_username }}:{{ github_token }}@github.com/bcourtney5965/dotfiles'
    #     dest: '{{ ansible_env.HOME }}'
    #     version: main
    #     force: yes
    #   tags: [dots]

    # current:
    # - name: Clone dotfiles repository to a dotfiles directory
    #   git:
    #     repo: 'https://{{ github_username }}:{{ github_token }}@github.com/bcourtney5965/dotfiles'
    #     dest: '{{ ansible_env.HOME }}/dotfiles'
    #     version: main
    #     force: yes
    #   tags: [dots]

    # - name: Clone dotfiles bare repository
    #   shell: git clone https://{{ github_username }}:{{ github_token }}@github.com/bcourtney5965/dotfiles.git {{ ansible_env.HOME }}/dotfiles
    #   args:
    #     creates: '{{ ansible_env.HOME }}/dotfiles'

    # - name: Clone dotfiles repository
    #   git:
    #     repo: 'https://{{ github_username }}:{{ github_token }}@github.com/bcourtney5965/dotfiles.git'
    #     dest: '{{ ansible_env.HOME }}'
    #     version: main
    #   tags: [dots]

    # And this one #2
    # - name: Clone dotfiles repository
    #   git:
    #     repo: 'https://{{ github_username }}:{{ github_token }}@github.com/bcourtney5965/dotfiles.git'
    #     dest: '{{ ansible_env.HOME }}'
    #     version: main
    #   tags: [dots]

    # And this one #3
    # - name: Clone dotfiles bare repository
    #   shell: git clone https://{{ github_username }}:{{ github_token }}@github.com/bcourtney5965/dotfiles.git {{ ansible_env.HOME }}/dotfiles
    #   args:
    #     creates: '{{ ansible_env.HOME }}/dotfiles'

    # Running congif-init script:
    - name: Ensure config-init script has execute permissions
      file:
        path: '{{ ansible_env.HOME }}/dotfiles/bin/config-init'
        mode: '0755'
      tags: [dots]

    - name: Run configuration initialization script
      shell: |
        cd {{ ansible_env.HOME }}/dotfiles
        ./bin/config-init
      args:
        executable: /usr/bin/bash
      tags: [dots]

    # TRY THESE TWO:
    # this one #1
    # - name: Run configuration initialization script
    #   shell: |
    #     curl -H "Authorization: token {{ github_token }}" \
    #     https://raw.githubusercontent.com/bcourtney5965/dotfiles/main/bin/config-init | bash
    #   args:
    #     executable: /usr/bin/bash

    # - name: Run configuration initialization script
    #   shell: |
    #     cd ~
    #     curl -H "Authorization: token {{ github_token }}" \
    #     https://raw.githubusercontent.com/bcourtney5965/dotfiles/main/bin/config-init | bash
    #   args:
    #     executable: /usr/bin/bash

    # - name: Download config-init script
    #   get_url:
    #     url: 'https://raw.githubusercontent.com/bcourtney5965/dotfiles/main/bin/config-init'
    #     dest: '{{ ansible_env.HOME }}/config-init'
    #     mode: '0755'

    # - name: Download config-init script
    #   get_url:
    #     url: 'https://{{ github_username }}:{{ github_token }}@raw.githubusercontent.com/bcourtney5965/dotfiles/main/bin/config-init'
    #     dest: '{{ ansible_env.HOME }}/config-init'
    #     mode: '0755'
    #     force_basic_auth: yes

    # - name: Run config-init script
    #   shell:
    #     cmd: '{{ ansible_env.HOME }}/bin/config-init'
    #   environment:
    #     HOME: '{{ ansible_env.HOME }}'
    #   register: config_init_result

    # - name: Run config-init script
    #   shell:
    #     cmd: '{{ ansible_env.HOME }}/bin/config-init'
    #   environment:
    #     HOME: '{{ ansible_env.HOME }}'
    #     GIT_USERNAME: '{{ github_username }}'
    #     GIT_TOKEN: '{{ github_token }}'
    #   register: config_init_result

    # - name: Display config-init output
    #   debug:
    #     var: config_init_result.stdout_lines

    # - name: Remove config-init script
    #   file:
    #     path: '{{ ansible_env.HOME }}/config-init'
    #     state: absent

    # OLD Stuff beyond here
    - name: Set correct permissions on SSH files
      file:
        path: '{{ ansible_env.HOME }}/.ssh'
        state: directory
        mode: '0700'
        recurse: yes
      become: yes

    # make "bin/config-init" script executable

    # - name: Run config-init script
    #   shell: bash {{ ansible_env.HOME }}/dotfiles/bin/config-init
    # # UNCOMMMENT BELOW:
    # - name: Make scripts in bin directory executable
    #   file:
    #     path: '{{ item }}'
    #     mode: '0755'
    #   loop: "{{ lookup('fileglob', '{{ ansible_env.HOME }}/dotfiles/bin/*', wantlist=True) }}"
    # - name: Run config-init script
    #   shell: bash {{ ansible_env.HOME }}/dotfiles/bin/config-init

    # - name: Define the dotfiles alias
    #   lineinfile:
    #     path: '{{ ansible_env.HOME }}/.zshrc'
    #     line: 'alias dotfiles="/usr/bin/git --git-dir={{ ansible_env.HOME }}/dotfiles --work-tree={{ ansible_env.HOME }}"'
    #     create: yes

    - name: Install VS Code
      include_tasks: TaskFiles/vscode_install.yml

    - name: Sign into GitHub in VS Code
      shell: code --install-extension GitHub.vscode-pull-request-github && code --add https://github.com/bcourtney5965/dotfiles

    - name: Install browsers
      include_tasks: TaskFiles/browser_install.yml

    - name: Install Docker
      include_tasks: TaskFiles/docker_install.yml

    - name: Setup dotfiles
      include_tasks: TaskFiles/dotfiles_setup.yml

    - name: Sign into Git
      shell: |
        git config --global user.name "{{ github_username }}"
        git config --global user.email "{{ npm_email }}"
        echo "{{ github_token }}" | gh auth login --with-token

    # revert to:     npm login --username="{{ npm_username }}   and     --email="{{ npm_email }}""
    - name: Sign into npm
      shell: |
        npm login --username="{{ github_username }}" --password="{{ npm_password }}" --email='{{ github_username }}@gmail.com'

    - name: Verify installations
      include_tasks: TaskFiles/verify_installations.yml
      tags: [verify]
